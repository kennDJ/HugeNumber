寒假的时候2月份 做的巨大数是完全用c写的
现在暑假7月份 快到8月底 打算用c++写一遍 将巨大数写成一个class
也想借此练习c++, 打算向Linux c/c++发展

由于以前完成过一遍 现在用c++来写是很快的 写的时候语法有细微的差距 毕竟是按照一个class来完成的
完成之后:
很大的感受就是 如果c++中有自动的内存管理真是太好了
这个语言既是面向对象的 还保留了指针 还有引用 这是很强悍的 很锋利的
但缺点就是内存得自己管理 自己擦屁股
在管理内存这一块 卡了挺长时间, 主要的一个问题就是 申请的对象 调用析构函数问题 比如
HUGEBUMBER num1;
HUGEBUMBER *num1 = new HUGENUMBER();
这是创建不同内存区域的两个对象 , 调用析构函数的方式也不一样
// 自动局部变量的构造函数是在程序的执行到达定义这个对象的位置时调用的，
// 而对应的析构函数是在程序离开这个对象的作用域时调用的（即定义这个对象的代码完成了执行）。
// 每次执行进入和离开自动对象的作用域时，
// 都会调用它的构造函数和析构函数。如果程序调用了exit或abort函数而终止，则不会调用自动对象的析构函数。

new申请的对象 最后手动delete ,它会找类下的析构函数 然后执行

因此 这个问题带来了很多问题

还有深拷贝的知识 是在除法的部分 需要复制一份对象

this 和 *this 是完成不一样的

new申请的内存是没有初始化的

不过面向对象确实带来很多方面 可以这样
num1->mul(num2)->mul(num2)->add(num2)

 但是在c里面 连续运算是很烦的 就得这样子
 mul(add(num1, num2), num1);

 打算学好c++, c的基础是不可或缺的, 尤其是对指针,指针用好了是一把利器,用不好就会划伤自己 ,一定要结和内存去理解指针
 
 还要理解认识面向对象思想,这一点有java的基础
